// üéØ „É™„Ç¢„É´„Çø„Ç§„É†‰ºöË©±„Éá„Éº„ÇøÂèéÈõÜ„Ç∑„Çπ„ÉÜ„É†
// NutriRoom Phase 2.3-ÂÆüÁî®Áâà: Á™ÅÁÑ∂„ÅÆÈõ¢ËÑ±„Åß„ÇÇ„Éá„Éº„Çø‰øùË≠∑

import { useState, useEffect, useCallback, useRef } from 'react'
import { 
  addConversationLog, 
  startSession, 
  getCurrentActiveSession,
  updateSummaryFromConversations 
} from '@/lib/supabase'

// „Çª„ÉÉ„Ç∑„Éß„É≥Ë®≠ÂÆö
const SESSION_TIMEOUT = 6 * 60 * 60 * 1000 // 6ÊôÇÈñìÁÑ°ÂøúÁ≠î„Åß‰ºëÁú†
const HEARTBEAT_INTERVAL = 30 * 1000 // 30Áßí„Åî„Å®„Å´„Éè„Éº„Éà„Éì„Éº„Éà

export interface ConversationLoggerState {
  sessionId: string | null
  isLogging: boolean
  messageCount: number
  lastActivity: Date | null
}

export interface SaveMessageParams {
  message: string
  type: 'user' | 'ai'
  voiceFile?: string
  emotionDetected?: string
}

/**
 * „É™„Ç¢„É´„Çø„Ç§„É†‰ºöË©±„É≠„Ç∞ÂèéÈõÜHook
 * „É¶„Éº„Ç∂„Éº‰ΩìÈ®ì„ÇíÊêç„Å™„Çè„Å™„ÅÑÈÄèÊòé„Å™Âãï‰Ωú
 */
export const useConversationLogger = (characterId: string) => {
  const [state, setState] = useState<ConversationLoggerState>({
    sessionId: null,
    isLogging: false,
    messageCount: 0,
    lastActivity: null
  })

  const heartbeatRef = useRef<NodeJS.Timeout | null>(null)
  const initializationRef = useRef<boolean>(false)

  // „Çª„ÉÉ„Ç∑„Éß„É≥ÂàùÊúüÂåñÔºà‰∏ÄÂ∫¶„Å†„ÅëÂÆüË°åÔºâ
  const initializeSession = useCallback(async () => {
    if (initializationRef.current) return

    try {
      initializationRef.current = true
      
      // Êó¢Â≠ò„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÊ§úÁ¥¢
      let session = await getCurrentActiveSession(characterId)
      
      if (!session) {
        // Êñ∞„Åó„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈñãÂßã
        session = await startSession(characterId)
        if (process.env.NODE_ENV === 'development') {
          console.log('‚úÖ New session started:', session?.id.substring(0, 8) + '...')
        }
      } else {
        if (process.env.NODE_ENV === 'development') {
          console.log('üîÑ Resumed existing session:', session.id.substring(0, 8) + '...')
        }
      }

      if (session) {
        setState(prev => ({
          ...prev,
          sessionId: session!.id,
          isLogging: true,
          lastActivity: new Date()
        }))

        // „Éè„Éº„Éà„Éì„Éº„ÉàÈñãÂßã
        startHeartbeat()
      }
    } catch (error) {
      console.error('‚ùå Failed to initialize session:', error)
    }
  }, [characterId])

  // „Éè„Éº„Éà„Éì„Éº„ÉàÔºà„Çª„ÉÉ„Ç∑„Éß„É≥Ê¥ªÊÄßÁä∂ÊÖãÁ∂≠ÊåÅÔºâ
  const startHeartbeat = useCallback(() => {
    if (heartbeatRef.current) {
      clearInterval(heartbeatRef.current)
    }

    heartbeatRef.current = setInterval(() => {
      setState(prev => {
        if (!prev.lastActivity) return prev

        const timeSinceLastActivity = Date.now() - prev.lastActivity.getTime()
        
        // 6ÊôÇÈñìÁÑ°ÂøúÁ≠î„Åß„Çª„ÉÉ„Ç∑„Éß„É≥‰ºëÁú†
        if (timeSinceLastActivity > SESSION_TIMEOUT) {
          if (process.env.NODE_ENV === 'development') {
            console.log('üò¥ Session going dormant due to inactivity')
          }
          return {
            ...prev,
            isLogging: false
          }
        }

        return prev
      })
    }, HEARTBEAT_INTERVAL)
  }, [])

  // „É°„ÉÉ„Çª„Éº„Ç∏‰øùÂ≠òÔºà„É°„Ç§„É≥Ê©üËÉΩÔºâ
  const saveMessage = useCallback(async ({
    message,
    type,
    voiceFile,
    emotionDetected
  }: SaveMessageParams): Promise<boolean> => {
    if (!state.sessionId || !state.isLogging) {
      console.warn('‚ö†Ô∏è No active session for logging')
      return false
    }

    try {
      // Ê†ÑÈ§ä„Éà„Éî„ÉÉ„ÇØËá™Âãï„Çø„Ç∞‰ªò„Åë
      const nutritionTags = extractNutritionTags(message)
      const taggedEmotion = emotionDetected || (nutritionTags.length > 0 ? 'nutrition_focused' : undefined)

      // Supabase„Å´Âç≥Â∫ß„Å´‰øùÂ≠ò
      const logEntry = await addConversationLog(
        state.sessionId,
        type,
        message,
        voiceFile || undefined,
        taggedEmotion
      )

      if (logEntry) {
        setState(prev => ({
          ...prev,
          messageCount: prev.messageCount + 1,
          lastActivity: new Date()
        }))

        if (process.env.NODE_ENV === 'development') {
          console.log('üìù Message logged:', {
            type,
            length: message.length,
            voiceFile,
            emotion: taggedEmotion,
            nutritionTags: nutritionTags.length > 0 ? nutritionTags : undefined
          })
        }

        // ÈùûÂêåÊúü„ÅßÊó•Ê¨°„Çµ„Éû„É™„ÉºÊõ¥Êñ∞ÔºàUI„Éñ„É≠„ÉÉ„ÇØ„Åó„Å™„ÅÑÔºâ
        setTimeout(async () => {
          try {
            await updateSummaryFromConversations(characterId)
          } catch (error) {
            console.warn('‚ö†Ô∏è Failed to update daily summary:', error)
          }
        }, 100)

        return true
      }

      return false
    } catch (error) {
      console.error('‚ùå Failed to save message:', error)
      return false
    }
  }, [state.sessionId, state.isLogging, characterId])

  // ÂàùÊúüÂåñ
  useEffect(() => {
    initializeSession()

    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    return () => {
      if (heartbeatRef.current) {
        clearInterval(heartbeatRef.current)
        heartbeatRef.current = null
      }
    }
  }, [initializeSession])

  // „Çø„ÉñÈõ¢ËÑ±ÊôÇ„ÅÆÂá¶ÁêÜ
  useEffect(() => {
    const handleBeforeUnload = () => {
      if (state.sessionId && state.messageCount > 0) {
        // ÊúÄÂæå„ÅÆÊ¥ªÂãïÊôÇÈñì„ÇíÊõ¥Êñ∞Ôºà„Éô„Çπ„Éà„Ç®„Éï„Ç©„Éº„ÉàÔºâ
        navigator.sendBeacon('/api/session/heartbeat', JSON.stringify({
          sessionId: state.sessionId,
          timestamp: new Date().toISOString()
        }))
      }
    }

    window.addEventListener('beforeunload', handleBeforeUnload)
    return () => window.removeEventListener('beforeunload', handleBeforeUnload)
  }, [state.sessionId, state.messageCount])

  return {
    saveMessage,
    sessionState: state,
    isReady: !!state.sessionId && state.isLogging
  }
}

// ===============================
// „Éò„É´„Éë„ÉºÈñ¢Êï∞
// ===============================

/**
 * Ê†ÑÈ§äÈñ¢ÈÄ£„Éà„Éî„ÉÉ„ÇØËá™ÂãïÊäΩÂá∫
 */
function extractNutritionTags(message: string): string[] {
  const tags: string[] = []
  const lowerMessage = message.toLowerCase()

  // Ê†ÑÈ§äÁ¥†Èñ¢ÈÄ£
  const nutrients = ['„Çø„É≥„Éë„ÇØË≥™', '„Éì„Çø„Éü„É≥', '„Éü„Éç„É©„É´', '„Ç´„É´„Ç∑„Ç¶„É†', 'ÈâÑÂàÜ', 'È£üÁâ©ÁπäÁ∂≠']
  if (nutrients.some(nutrient => lowerMessage.includes(nutrient.toLowerCase()))) {
    tags.push('Ê†ÑÈ§äÁ¥†')
  }

  // È£üÊùêÈñ¢ÈÄ£
  const foods = ['ÈáéËèú', 'ÊûúÁâ©', 'ËÇâ', 'È≠ö', 'Á©ÄÁâ©', '‰π≥Ë£ΩÂìÅ', 'Ë±ÜÈ°û']
  if (foods.some(food => lowerMessage.includes(food))) {
    tags.push('È£üÊùê')
  }

  // È£ü‰∫ã„Éë„Çø„Éº„É≥Èñ¢ÈÄ£
  const mealPatterns = ['ÊúùÈ£ü', 'ÊòºÈ£ü', 'Â§ïÈ£ü', '„Åä„ÇÑ„Å§', '„ÉÄ„Ç§„Ç®„ÉÉ„Éà', 'Ê∏õÈáè', 'Â¢óÈáè']
  if (mealPatterns.some(pattern => lowerMessage.includes(pattern))) {
    tags.push('È£ü‰∫ã„Éë„Çø„Éº„É≥')
  }

  // ÂÅ•Â∫∑Èñ¢ÈÄ£
  const health = ['ÂÅ•Â∫∑', 'ÁóÖÊ∞ó', '„Ç¢„É¨„É´„ÇÆ„Éº', '‰ΩìÈáç', 'Ë°ÄÂúß', 'Ë°ÄÁ≥ñÂÄ§']
  if (health.some(h => lowerMessage.includes(h))) {
    tags.push('ÂÅ•Â∫∑ÁÆ°ÁêÜ')
  }

  // Ë™øÁêÜÈñ¢ÈÄ£
  const cooking = ['ÊñôÁêÜ', 'Ë™øÁêÜ', '„É¨„Ç∑„Éî', '‰Ωú„ÇäÊñπ', 'Ë™øÂë≥Êñô']
  if (cooking.some(c => lowerMessage.includes(c))) {
    tags.push('Ë™øÁêÜ')
  }

  return tags
}

/**
 * „Éá„Éê„ÉÉ„Ç∞Áî®„É≠„Ç∞Áä∂ÊÖãË°®Á§∫
 */
export const debugConversationLogger = (state: ConversationLoggerState): void => {
  console.log('üìä Conversation Logger Debug:', {
    sessionId: state.sessionId?.substring(0, 8) + '...',
    isLogging: state.isLogging,
    messageCount: state.messageCount,
    lastActivity: state.lastActivity?.toLocaleString('ja-JP'),
    timeSinceLastActivity: state.lastActivity 
      ? Math.round((Date.now() - state.lastActivity.getTime()) / 1000 / 60) + ' minutes'
      : 'N/A'
  })
}