// üéØ NutriRoom Phase 2.4: Gemini 1.5 Pro„Äå‰ªäÊó•„ÅÆ„ÅäÊâãÁ¥ô„Äç„Ç∑„Çπ„ÉÜ„É†
// Google Gemini 1.5 ProÁµ±Âêà - ÁÑ°ÊñôÊû†Â§ß„ÉªÊó•Êú¨Ë™ûÂæóÊÑè„Éª‰ºöË©±ÂàÜÊûêÊúÄÈÅ©

import { GoogleGenerativeAI, GenerativeModel } from '@google/generative-ai'

// Gemini„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ
const initializeGeminiClient = (): GoogleGenerativeAI | null => {
  try {
    // Ë§áÊï∞„ÅÆÁí∞Â¢ÉÂ§âÊï∞Âêç„Çí„Çµ„Éù„Éº„Éà
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || 
                   process.env.GEMINI_API_KEY || 
                   process.env.NEXT_PUBLIC_GOOGLE_AI_API_KEY ||
                   process.env.GOOGLE_AI_API_KEY
    
    if (!apiKey) {
      console.error('‚ùå Gemini API key not found. Set GEMINI_API_KEY or GOOGLE_AI_API_KEY')
      return null
    }

    if (apiKey === 'your_gemini_api_key_here' || apiKey === 'your_google_ai_api_key_here') {
      console.warn('‚ö†Ô∏è Using placeholder API key - this will not work in production')
      return null
    }

    console.log('üöÄ Initializing Gemini 1.5 Pro client...')
    const genAI = new GoogleGenerativeAI(apiKey)
    console.log('‚úÖ Gemini client initialized successfully')
    
    return genAI
  } catch (error) {
    console.error('‚ùå Failed to initialize Gemini client:', error)
    return null
  }
}

// Gemini„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Ç§„É≥„Çπ„Çø„É≥„Çπ
const genAI = initializeGeminiClient()

// Gemini 1.5 Pro„É¢„Éá„É´ÂèñÂæó
export const getGeminiModel = (): GenerativeModel | null => {
  if (!genAI) {
    console.error('‚ùå Gemini client not available')
    return null
  }

  try {
    const model = genAI.getGenerativeModel({ 
      model: 'gemini-1.5-pro',
      generationConfig: {
        temperature: 0.7,          // ÂâµÈÄ†ÊÄß„Å®„ÅÆ„Éê„É©„É≥„Çπ
        topK: 40,                  // È´òÂìÅË≥™„Å™ÂøúÁ≠î
        topP: 0.8,                 // ÈÅ©Â∫¶„Å™Â§öÊßòÊÄß
        maxOutputTokens: 2048,     // „ÅäÊâãÁ¥ô„Å´ÂçÅÂàÜ„Å™Èï∑„Åï
      }
    })
    
    console.log('‚úÖ Gemini 1.5 Pro model loaded')
    return model
  } catch (error) {
    console.error('‚ùå Failed to load Gemini model:', error)
    return null
  }
}

// GeminiÂà©Áî®ÂèØËÉΩÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
export const isGeminiAvailable = (): boolean => {
  return genAI !== null
}

// „Éá„Éê„ÉÉ„Ç∞Áî®GeminiÊÉÖÂ†±Ë°®Á§∫
export const debugGeminiSetup = (): void => {
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || 
                 process.env.GEMINI_API_KEY || 
                 process.env.NEXT_PUBLIC_GOOGLE_AI_API_KEY ||
                 process.env.GOOGLE_AI_API_KEY
  
  console.log('üîç Gemini Setup Debug:', {
    hasApiKey: !!apiKey,
    apiKeyLength: apiKey?.length || 0,
    apiKeyPreview: apiKey ? apiKey.substring(0, 10) + '...' : 'not found',
    isPlaceholder: apiKey === 'your_gemini_api_key_here' || apiKey === 'your_google_ai_api_key_here',
    environmentVars: {
      NEXT_PUBLIC_GEMINI_API_KEY: !!process.env.NEXT_PUBLIC_GEMINI_API_KEY,
      GEMINI_API_KEY: !!process.env.GEMINI_API_KEY,
      NEXT_PUBLIC_GOOGLE_AI_API_KEY: !!process.env.NEXT_PUBLIC_GOOGLE_AI_API_KEY,
      GOOGLE_AI_API_KEY: !!process.env.GOOGLE_AI_API_KEY
    },
    clientAvailable: isGeminiAvailable(),
    modelReady: !!getGeminiModel()
  })
}

// „Ç®„ÇØ„Çπ„Éù„Éº„Éà
export { genAI }
export default getGeminiModel